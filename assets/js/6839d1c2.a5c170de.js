"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[16415],{71184:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var a=i(14041);const t={},r=a.createContext(t);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(r.Provider,{value:n},e.children)}},95801:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"summaries/plugins/opacity","title":"@elizaos/adapter-opacity","description":"Purpose","source":"@site/packages/summaries/plugins/opacity.md","sourceDirName":"summaries/plugins","slug":"/summaries/plugins/opacity","permalink":"/packages/summaries/plugins/opacity","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"@elizaos/plugin-omniflix","permalink":"/packages/summaries/plugins/omniflix"},"next":{"title":"@elizaos/plugin-open-weather","permalink":"/packages/summaries/plugins/open-weather"}}');var t=i(31085),r=i(71184);const s={},l="@elizaos/adapter-opacity",o={},c=[{value:"Purpose",id:"purpose",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Integration",id:"integration",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Links",id:"links",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"elizaosadapter-opacity",children:"@elizaos/adapter-opacity"})}),"\n",(0,t.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,t.jsx)(n.p,{children:"This adapter integrates Opacity proofs into ElizaOS, enabling verifiable inference results from AI model providers through the CloudFlare AI Gateway."}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Implements ",(0,t.jsx)(n.code,{children:"IVerifiableInferenceAdapter"})," interface for standardized verifiable inference"]}),"\n",(0,t.jsx)(n.li,{children:"Support for multiple AI model providers"}),"\n",(0,t.jsx)(n.li,{children:"Customizable options for each request"}),"\n",(0,t.jsx)(n.li,{children:"Built-in proof verification"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"bun add @elizaos/adapter-opacity\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Add environment variables to your ",(0,t.jsx)(n.code,{children:".env"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-env",children:"OPACITY_TEAM_ID=f309ac8ae8a9a14a7e62cd1a521b1c5f\nOPACITY_CLOUDFLARE_NAME=eigen-test\nOPACITY_PROVER_URL=https://opacity-ai-zktls-demo.vercel.app\nVERIFIABLE_INFERENCE_ENABLED=true\nVERIFIABLE_INFERENCE_PROVIDER=opacity\n"})}),"\n",(0,t.jsx)(n.h2,{id:"integration",children:"Integration"}),"\n",(0,t.jsx)(n.p,{children:"The adapter wraps AI model API calls to CloudFlare, performs MPC-TLS on logged responses, enabling verifiable API calls, proof generation, and verification of response authenticity."}),"\n",(0,t.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { OpacityAdapter } from '@elizaos/adapter-opacity';\nimport { VerifiableInferenceOptions } from '@elizaos/core';\n\n// Initialize the adapter\nconst opacityAdapter = new OpacityAdapter(runtime, {\n  teamId: process.env.OPACITY_TEAM_ID,\n  teamName: process.env.OPACITY_CLOUDFLARE_NAME,\n  baseUrl: process.env.OPACITY_PROVER_URL,\n});\n\n// Generate text with verifiable results\nconst result = await opacityAdapter.generateText('What is Rust?', 'gpt-4', options);\n\n// Verify the proof\nconst isValid = await opacityAdapter.verifyProof(result);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"links",children:"Links"}),"\n",(0,t.jsx)(n.p,{children:"MIT License"})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);