"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[67188],{27710:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"cli/test","title":"Test Command","description":"Run and manage tests for ElizaOS projects and plugins","source":"@site/docs/cli/test.md","sourceDirName":"cli","slug":"/cli/test","permalink":"/docs/cli/test","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/v2-develop/packages/docs/docs/cli/test.md","tags":[],"version":"current","lastUpdatedBy":"Sayo","lastUpdatedAt":1745170426000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Test Command","description":"Run and manage tests for ElizaOS projects and plugins","keywords":["testing","unit tests","integration tests","Jest","test runner","development"],"image":"/img/cli.jpg"},"sidebar":"tutorialSidebar","previous":{"title":"Start","permalink":"/docs/cli/start"},"next":{"title":"Update","permalink":"/docs/cli/update"}}');var i=n(31085),r=n(71184);const l={sidebar_position:6,title:"Test Command",description:"Run and manage tests for ElizaOS projects and plugins",keywords:["testing","unit tests","integration tests","Jest","test runner","development"],image:"/img/cli.jpg"},c="Test Command",o={},a=[{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:2},{value:"Test Structure",id:"test-structure",level:2},{value:"Running Tests",id:"running-tests",level:2},{value:"Basic Test Execution",id:"basic-test-execution",level:3},{value:"Running Specific Tests",id:"running-specific-tests",level:3},{value:"Watch Mode",id:"watch-mode",level:3},{value:"Test Output",id:"test-output",level:2},{value:"Writing Tests",id:"writing-tests",level:2},{value:"Project Tests",id:"project-tests",level:3},{value:"Plugin Tests",id:"plugin-tests",level:3},{value:"Test Hooks",id:"test-hooks",level:2},{value:"Test Assertions",id:"test-assertions",level:2},{value:"Examples",id:"examples",level:2},{value:"Testing a Complete Project",id:"testing-a-complete-project",level:3},{value:"Testing During Development",id:"testing-during-development",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Tests not found",id:"tests-not-found",level:3},{value:"Tests timing out",id:"tests-timing-out",level:3},{value:"TypeScript errors",id:"typescript-errors",level:3},{value:"Related Commands",id:"related-commands",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"test-command",children:"Test Command"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"test"})," command allows you to run tests for your ElizaOS projects, plugins, and agents. It helps ensure your implementations work correctly before deployment."]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npx @elizaos/cli test [options]\n"})}),"\n",(0,i.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Option"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"-p, --port <port>"})}),(0,i.jsx)(t.td,{children:"Port to listen on"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"-pl, --plugin <name>"})}),(0,i.jsx)(t.td,{children:"Name of plugin to test"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"-sp, --skip-plugins"})}),(0,i.jsx)(t.td,{children:"Skip plugin tests"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"-spt, --skip-project-tests"})}),(0,i.jsx)(t.td,{children:"Skip project tests"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"-sb, --skip-build"})}),(0,i.jsx)(t.td,{children:"Skip building before running tests"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"--verbose"})}),(0,i.jsx)(t.td,{children:"Show detailed test output"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"--json"})}),(0,i.jsx)(t.td,{children:"Output results in JSON format"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"--timeout"})}),(0,i.jsx)(t.td,{children:"Timeout in milliseconds for each test (default: 5000)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"--fail-fast"})}),(0,i.jsx)(t.td,{children:"Stop after first test failure"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"--no-compilation"})}),(0,i.jsx)(t.td,{children:"Skip TypeScript compilation"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"--config"}),", ",(0,i.jsx)(t.code,{children:"-c"})]}),(0,i.jsx)(t.td,{children:"Path to test configuration file"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"--config"}),", ",(0,i.jsx)(t.code,{children:"-c"})]}),(0,i.jsx)(t.td,{children:"Path to test configuration file"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"test-structure",children:"Test Structure"}),"\n",(0,i.jsx)(t.p,{children:"ElizaOS tests are organized in three levels:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Test Files"}),": Physical files containing test suites"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Test Suites"}),": Groups of related tests with a unique name"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Tests"}),": Individual test cases that verify specific functionality"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Tests are defined in plugins or projects using a structured format:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Example test structure from a plugin\nconst tests = [\n  {\n    name: 'plugin_test_suite',\n    tests: [\n      {\n        name: 'example_test',\n        fn: async (runtime) => {\n          // Test implementation\n          if (runtime.character.name !== 'Eliza') {\n            throw new Error('Expected character name to be \"Eliza\"');\n          }\n        },\n      },\n      {\n        name: 'should_have_action',\n        fn: async (runtime) => {\n          // Another test\n          const actionExists = plugin.actions.some((a) => a.name === 'EXAMPLE_ACTION');\n          if (!actionExists) {\n            throw new Error('Example action not found in plugin');\n          }\n        },\n      },\n    ],\n  },\n];\n"})}),"\n",(0,i.jsx)(t.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(t.h3,{id:"basic-test-execution",children:"Basic Test Execution"}),"\n",(0,i.jsx)(t.p,{children:"Run all tests in the current project:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Navigate to your project\ncd my-agent-project\n\n# Run all tests\nnpx @elizaos/cli test\n"})}),"\n",(0,i.jsx)(t.h3,{id:"running-specific-tests",children:"Running Specific Tests"}),"\n",(0,i.jsx)(t.p,{children:"Target specific test suites or individual tests:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run a specific test suite\nnpx @elizaos/cli test --suite plugin_test_suite\n\n# Run a specific test\nnpx @elizaos/cli test --suite plugin_test_suite --test example_test\n\n# Run tests from a specific file\nnpx @elizaos/cli test --file src/tests/agent.test.ts\n"})}),"\n",(0,i.jsx)(t.h3,{id:"watch-mode",children:"Watch Mode"}),"\n",(0,i.jsx)(t.p,{children:"Automatically rerun tests when files change:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npx @elizaos/cli test --watch\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-output",children:"Test Output"}),"\n",(0,i.jsx)(t.p,{children:"The test command produces output showing test results:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"PASS  Test Suite: plugin_test_suite (2 tests)\n  \u2713 example_test (15ms)\n  \u2713 should_have_action (3ms)\n\nFAIL  Test Suite: agent_test_suite (3 tests)\n  \u2713 agent_initialization (20ms)\n  \u2713 message_processing (45ms)\n  \u2717 knowledge_retrieval (30ms)\n    Error: Expected 3 knowledge items but got 2\n\nTest Suites: 1 failed, 1 passed, 2 total\nTests:       1 failed, 4 passed, 5 total\nTime:        1.5s\n"})}),"\n",(0,i.jsx)(t.h2,{id:"writing-tests",children:"Writing Tests"}),"\n",(0,i.jsx)(t.h3,{id:"project-tests",children:"Project Tests"}),"\n",(0,i.jsx)(t.p,{children:"Project tests typically verify agent behavior, knowledge retrieval, and integration with plugins:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Example project test\nexport default {\n  name: 'agent_behavior_tests',\n  tests: [\n    {\n      name: 'responds_to_greeting',\n      fn: async (runtime) => {\n        const agent = runtime.getAgent('assistant');\n        const response = await agent.processMessage({\n          content: { text: 'Hello' },\n          userId: 'test-user',\n        });\n\n        if (!response.content.text.includes('hello') && !response.content.text.includes('Hi')) {\n          throw new Error('Agent did not respond to greeting properly');\n        }\n      },\n    },\n  ],\n};\n"})}),"\n",(0,i.jsx)(t.h3,{id:"plugin-tests",children:"Plugin Tests"}),"\n",(0,i.jsx)(t.p,{children:"Plugin tests verify the functionality of actions, services, and providers:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Example plugin test\nexport const testSuite = {\n  name: 'discord_plugin_tests',\n  tests: [\n    {\n      name: 'registers_discord_service',\n      fn: async (runtime) => {\n        const service = runtime.getService('discord');\n        if (!service) {\n          throw new Error('Discord service not registered');\n        }\n      },\n    },\n    {\n      name: 'handles_discord_messages',\n      fn: async (runtime) => {\n        // Test implementation\n      },\n    },\n  ],\n};\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-hooks",children:"Test Hooks"}),"\n",(0,i.jsx)(t.p,{children:"ElizaOS tests support hooks for setup and teardown:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"export default {\n  name: 'database_tests',\n  beforeAll: async (runtime) => {\n    // Setup test database\n    await runtime.db.migrate();\n  },\n  afterAll: async (runtime) => {\n    // Clean up test database\n    await runtime.db.clean();\n  },\n  beforeEach: async (runtime, test) => {\n    // Setup before each test\n    console.log(`Running test: ${test.name}`);\n  },\n  afterEach: async (runtime, test) => {\n    // Cleanup after each test\n  },\n  tests: [\n    // Test cases\n  ],\n};\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-assertions",children:"Test Assertions"}),"\n",(0,i.jsx)(t.p,{children:"Tests should make assertions to verify behavior:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"test('check_knowledge_retrieval', async (runtime) => {\n  const query = 'What is our refund policy?';\n  const results = await runtime.knowledge.search(query);\n\n  // Check count\n  if (results.length === 0) {\n    throw new Error('No knowledge results found');\n  }\n\n  // Check relevance\n  if (!results[0].text.includes('refund') && !results[0].text.includes('return')) {\n    throw new Error('Knowledge results not relevant to query');\n  }\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.h3,{id:"testing-a-complete-project",children:"Testing a Complete Project"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run all tests\nnpx @elizaos/cli test\n\n# Run with detailed output\nnpx @elizaos/cli test --verbose\n"})}),"\n",(0,i.jsx)(t.h3,{id:"testing-during-development",children:"Testing During Development"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Watch for changes and automatically rerun tests\nnpx @elizaos/cli test --watch\n\n# Focus on a specific test while debugging\nnpx @elizaos/cli test --suite agent_suite --test message_handling --watch\n"})}),"\n",(0,i.jsx)(t.h3,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Run tests in CI environment\nnpx @elizaos/cli test --json > test-results.json\n"})}),"\n",(0,i.jsx)(t.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(t.h3,{id:"tests-not-found",children:"Tests not found"}),"\n",(0,i.jsx)(t.p,{children:"If tests aren't being discovered:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Check test discovery with verbose logging\nnpx @elizaos/cli test --verbose\n\n# Try specifying the test file directly\nnpx @elizaos/cli test --file src/tests/main.test.ts\n"})}),"\n",(0,i.jsx)(t.h3,{id:"tests-timing-out",children:"Tests timing out"}),"\n",(0,i.jsx)(t.p,{children:"For long-running tests:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Increase test timeout\nnpx @elizaos/cli test --timeout 10000\n"})}),"\n",(0,i.jsx)(t.h3,{id:"typescript-errors",children:"TypeScript errors"}),"\n",(0,i.jsx)(t.p,{children:"If TypeScript compilation is failing:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Build the project first\nnpx @elizaos/cli project build\n\n# Then run tests without recompilation\nnpx @elizaos/cli test --no-compilation\n"})}),"\n",(0,i.jsx)(t.h2,{id:"related-commands",children:"Related Commands"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/docs/cli/dev",children:(0,i.jsx)(t.code,{children:"dev"})}),": Run your project in development mode"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/docs/cli/start",children:(0,i.jsx)(t.code,{children:"start"})}),": Start your project in production mode"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"./projects.md",children:(0,i.jsx)(t.code,{children:"project"})}),": Manage project configuration"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},71184:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>c});var s=n(14041);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);